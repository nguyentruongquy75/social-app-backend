// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int              @id @default(autoincrement())
  fullName              String
  bio                   String?
  email                 String           @unique
  password              String
  avatarImage           String?
  coverImage            String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @default(now())
  status                String
  friends               User[]           @relation("friends")
  friendsRelation       User[]           @relation("friends")
  posts                 Post[]           @relation("post")
  friendInvitations     Invitation[]     @relation("receiver")
  sentFriendInvitations Invitation[]     @relation("sender")
  newfeeds              Post[]           @relation("newfeeds")
  notifications         Notification[]
  chatRooms             ChatRoomOnUser[]
  tags                  Post[]           @relation("tag")
  comments              Comment[]        @relation("comment")
  taggedComment         Comment[]        @relation("tag")
  reactions             Reaction[]
  messsages             Message[]        @relation("user")
  seenMessages          Message[]        @relation("seen")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId Int
  user   User @relation("post", fields: [userId], references: [id])

  tags User[] @relation("tag")

  userNewfeed User[] @relation("newfeeds")

  reactions    Reaction[]
  comments     Comment[]
  notification Notification[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId Int
  user   User @relation("comment", fields: [userId], references: [id])

  tags User[] @relation("tag")

  replyId Int?
  replyOf Comment?  @relation("reply", fields: [replyId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("reply")

  reactions Reaction[]

  postId       Int
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  Notification Notification[]
}

model Reaction {
  id        Int      @id @default(autoincrement())
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  postId Int?
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  commentId    Int?
  comment      Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  Message      Message[]
  Notification Notification[]
}

model ChatRoom {
  id     Int              @id @default(autoincrement())
  type   String
  isRead Boolean          @default(false)
  name   String
  users  ChatRoomOnUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  messages      Message[] @relation("messages")
  lastMessageId Int?
  lastMessage   Message?  @relation("lastMessage", fields: [lastMessageId], references: [id])

  @@unique([lastMessageId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  chatRoomId Int
  chatRoom   ChatRoom @relation("messages", fields: [chatRoomId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation("user", fields: [userId], references: [id])

  lastMessageRoom ChatRoom? @relation("lastMessage")

  reaction Reaction[]

  seenUserId Int?
  seen       User[] @relation("seen")
}

model Invitation {
  id        Int      @id @default(autoincrement())
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  receiverId Int
  receiver   User @relation("receiver", fields: [receiverId], references: [id])

  senderId Int
  sender   User @relation("sender", fields: [senderId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  link      String
  type      String
  isRead    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  postId Int?
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  forCommentId Int?
  forComment   Comment? @relation(fields: [forCommentId], references: [id], onDelete: Cascade)

  forReactionId Int?
  forReaction   Reaction? @relation(fields: [forReactionId], references: [id], onDelete: Cascade)
}

model ChatRoomOnUser {
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  asignedAt DateTime @default(now())

  @@id([userId, chatRoomId])
}
